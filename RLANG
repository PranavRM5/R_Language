#syntax and print

"Hello World!"

5 + 5

# We need this line of code to show graphs in our compiler
bitmap(file="out.png")

# Plot numbers from 1 to 10 on the graph
plot(1:10)

"Hello World!"

5
10
25

5 + 5

print("Hello World!")

for (x in 1:10) {
  print(x)
}

#comment

# This is a comment
"Hello World!"

"Hello World!" # This is a comment

# "Good morning!"
"Good night!"

# This is a comment
# written in
# more than just one line
"Hello World!"

#variable

#1

name <- "John"
age <- 40

name   # output "John"
age    # output 40

#2

name <- "John Doe"

name # auto-print the value of the name variable

#3

name <- "John Doe"

print(name) # print the value of the name variable

#4

for (x in 1:10) {
  print(x)
}

#R Concatenate Elements

#1

text <- "awesome"

paste("R is", text)

#2

text1 <- "R is"
text2 <- "awesome"

paste(text1, text2)

#3

num1 <- 5
num2 <- 10

num1 + num2

#4

num <- 5
text <- "Some text"

num + text

#Multiple Variables

#1

# Assign the same value to multiple variables in one line
var1 <- var2 <- var3 <- "Orange"

# Print variable values
var1
var2
var3

#Variable Names (Identifiers)

#1

# Legal variable names:
myvar <- "John"
my_var <- "John"
myVar <- "John"
MYVAR <- "John"
myvar2 <- "John"
.myvar <- "John"

# Illegal variable names:
2myvar <- "John"
my-var <- "John"
my var <- "John"
_my_var <- "John"
my_v@ar <- "John"
TRUE <- "John"

#Data Types

#1

my_var <- 30 # my_var is type of numeric
my_var <- "Sally" # my_var is now of type character (aka string)

#2

# numeric
x <- 10.5
class(x)

# integer
x <- 1000L
class(x)

# complex
x <- 9i + 3
class(x)

# character/string
x <- "R is exciting"
class(x)

# logical/boolean
x <- TRUE
class(x)

#Numbers

#1

x <- 10.5   # numeric
y <- 10L    # integer
z <- 1i     # complex

#2 Numeric

x <- 10.5
y <- 55

# Print values of x and y
x
y

# Print the class name of x and y
class(x)
class(y)

#3 Integer

x <- 1000L
y <- 55L

# Print values of x and y
x
y

# Print the class name of x and y
class(x)
class(y)

#4 Complex

x <- 3+5i
y <- 5i

# Print values of x and y
x
y

# Print the class name of x and y
class(x)
class(y)

#Type Conversion

x <- 1L # integer
y <- 2 # numeric

# convert from integer to numeric:
a <- as.numeric(x)

# convert from numeric to integer:
b <- as.integer(y)

# print values of x and y
x
y

# print the class name of a and b
class(a)
class(b)

#Math

#1

10 + 5

#2

10 - 5

#3

max(5, 10, 15)

min(5, 10, 15)

#4 sqrt()

sqrt(16)

#5 abs()

abs(-4.7)

#6 ceiling() and floor()

ceiling(1.4)

floor(1.4)

#Strings

#1

"hello"
'hello'

#2

str <- "Hello"
str # print the value of str

#3

str <- "Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."

str # print the value of str

#4

str <- "Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."

cat(str)

#1String Length

str <- "Hello World!"

nchar(str)

#2 Check a String

str <- "Hello World!"

grepl("H", str)
grepl("Hello", str)
grepl("X", str)

#3 Combine Two Strings

str1 <- "Hello"
str2 <- "World"

paste(str1, str2)

#Escape Characters

#1

str <- "We are the so-called "Vikings", from the north."

str

#2

str <- "We are the so-called \"Vikings\", from the north."

str
cat(str)

#\\	Backslash
#\n	New Line
#\r	Carriage Return
#\t	Tab
#\b	Backspace

#Booleans / Logical Values

#1

10 > 9    # TRUE because 10 is greater than 9
10 == 9   # FALSE because 10 is not equal to 9
10 < 9    # FALSE because 10 is greater than 9

#2

a <- 10
b <- 9

a > b

#3

a <- 200
b <- 33

if (b > a) {
  print ("b is greater than a")
} else {
  print("b is not greater than a")
}

#Arithmetic Operators

#1

10 + 5

10 - 5
	
10 * 5	

10 / 5	

10 ^ 5	

10 %% 5	

10%/%y

#2

my_var <- 3

my_var <<- 3

3 -> my_var

3 ->> my_var

my_var # print my_var

#Comparison Operators

10 == 5

10 != 5

10 > 5

10 < 5

10 >= 5

10 <= 5

#  &	  Element-wise Logical AND operator. It returns TRUE if both elements are TRUE
#  &&	  Logical AND operator - Returns TRUE if both statements are TRUE
#  |	  Elementwise- Logical OR operator. It returns TRUE if one of the statement is TRUE
#  ||	  Logical OR operator. It returns TRUE if one of the statement is TRUE.
#  !

# :	      Creates a series of numbers in a sequence	      x <- 1:10
# %in%	Find out if an element belongs to a vector	x %in% y
# %*%	      Matrix Multiplication	                        x <- Matrix1 %*% Matrix2

# If ... Else

#if Statement

a <- 33
b <- 200

if (b > a) {
  print("b is greater than a")
}

#Else If

a <- 33
b <- 33

if (b > a) {
  print("b is greater than a")
} else if (a == b) {
  print ("a and b are equal")
}

#If Else

#1

a <- 200
b <- 33

if (b > a) {
  print("b is greater than a")
} else if (a == b) {
  print("a and b are equal")
} else {
  print("a is greater than b")
}

#2

a <- 200
b <- 33

if (b > a) {
  print("b is greater than a")
} else {
  print("b is not greater than a")
}

#Nested If

x <- 41

if (x > 10) {
  print("Above ten")
  if (x > 20) {
    print("and also above 20!")
  } else {
    print("but not above 20.")
  }
} else {
  print("below 10.")
}

#AND OR Operators

#AND

a <- 200
b <- 33
c <- 500

if (a > b & c > a) {
  print("Both conditions are true")
}

#OR

a <- 200
b <- 33
c <- 500

if (a > b | a > c) {
  print("At least one of the conditions is true")
}

#While Loop

i <- 1
while (i < 6) {
  print(i)
  i <- i + 1
}

#Break

i <- 1
while (i < 6) {
  print(i)
  i <- i + 1
  if (i == 4) {
    break
  }
}

#Next

i <- 0
while (i < 6) {
  i <- i + 1
  if (i == 3) {
    next
  }
  print(i)
}

#Yahtzee!

dice <- 1
while (dice <= 6) {
  if (dice < 6) {
    print("No Yahtzee")
  } else {
    print("Yahtzee!")
  }
  dice <- dice + 1
}

#For Loop

#1

for (x in 1:10) {
  print(x)
}

#2

fruits <- list("apple", "banana", "cherry")

for (x in fruits) {
  print(x)
}

#3

dice <- c(1, 2, 3, 4, 5, 6)

for (x in dice) {
  print(x)
}

#4 Break

fruits <- list("apple", "banana", "cherry")

for (x in fruits) {
  if (x == "cherry") {
    break
  }
  print(x)
}

#5 Next

fruits <- list("apple", "banana", "cherry")

for (x in fruits) {
  if (x == "banana") {
    next
  }
  print(x)
}

#6Yahtzee!

dice <- 1:6

for(x in dice) {
  if (x == 6) {
    print(paste("The dice number is", x, "Yahtzee!"))
  } else {
    print(paste("The dice number is", x, "Not Yahtzee"))
  }
}

#Nested Loops

adj <- list("red", "big", "tasty")

fruits <- list("apple", "banana", "cherry")
  for (x in adj) {
    for (y in fruits) {
      print(paste(x, y))
  }
}

#Functions

my_function <- function() { # create a function with the name my_function
  print("Hello World!")
}

#Call a Function

my_function <- function() {
  print("Hello World!")
}


my_function() # call the function named my_function


#Arguments

my_function <- function(fname) {
  paste(fname, "Griffin")
}

my_function("Peter")
my_function("Lois")
my_function("Stewie")

#Number of Arguments

my_function <- function(fname, lname) {
  paste(fname, lname)
}

my_function("Peter", "Griffin")

#Default Parameter Value

my_function <- function(country = "Norway") {
  paste("I am from", country)
}

my_function("Sweden")
my_function("India")
my_function() # will get the default value, which is Norway
my_function("USA")

#Return Values

my_function <- function(x) {
  return (5 * x)
}

print(my_function(3))
print(my_function(5))
print(my_function(9))

#Nested Functions

#1

Nested_function <- function(x, y) {
  a <- x + y
  return(a)
}

Nested_function(Nested_function(2,2), Nested_function(3,3))

#2

Outer_func <- function(x) {
  Inner_func <- function(y) {
    a <- x + y
    return(a)
  }
  return (Inner_func)
}
output <- Outer_func(3) # To call the Outer_func
output(5)

#Function Recursion

tri_recursion <- function(k) {
  if (k > 0) {
    result <- k + tri_recursion(k - 1)
    print(result)
  } else {
    result = 0
    return(result)
  }
}
tri_recursion(6)

#Global Variables

#1

txt <- "awesome"
my_function <- function() {
  paste("R is", txt)
}

my_function()

#2

txt <- "global variable"
my_function <- function() {
  txt = "fantastic"
  paste("R is", txt)
}

my_function()

txt # print txt

#3

my_function <- function() {
txt <<- "fantastic"
  paste("R is", txt)
}

my_function()

print(txt)

#4

txt <- "awesome"
my_function <- function() {
  txt <<- "fantastic"
  paste("R is", txt)
}

my_function()

paste("R is", txt)












